{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to RDK Documentation For full documentation visit Developer portal at Developer portal RDK is the software that helps run video, broadband, and IoT devices more efficiently by standardizing the software stacks that run on most TV set-top boxes, internet gateways, and IoT devices in the home For RDK-V Architecture, visit Architecture For Trying out RDK-V, visit Try Out RDK-V","title":"Welcome to RDK Documentation"},{"location":"#welcome-to-rdk-documentation","text":"For full documentation visit Developer portal at Developer portal RDK is the software that helps run video, broadband, and IoT devices more efficiently by standardizing the software stacks that run on most TV set-top boxes, internet gateways, and IoT devices in the home For RDK-V Architecture, visit Architecture For Trying out RDK-V, visit Try Out RDK-V","title":"Welcome to RDK Documentation"},{"location":"rdkv/","text":"For full documentation visit Developer portal Architecture For RDK-V Architecture, visit Architecture Try Out RDK-V For Trying out RDK-V, visit Try Out RDK-V","title":"Index"},{"location":"rdkv/#architecture","text":"For RDK-V Architecture, visit Architecture","title":"Architecture"},{"location":"rdkv/#try-out-rdk-v","text":"For Trying out RDK-V, visit Try Out RDK-V","title":"Try Out RDK-V"},{"location":"rdkv/RDK_V_Architecture/","text":"Architecture RDK Video (RDK-V) Architecture is designed to enable service providers and device manufacturers to develop and deploy innovative video applications, services, and user experiences. It consists of several key components that work together seamlessly to provide a robust video platform. By leveraging the pluggable architecture of RDK-V, a variety of target device profiles can be supported, ranging from a basic IP streaming video platform to a full-fledged TV. IP provides a common method to manage video playback functions. The IP client device serves as an interface and receives video content from an in-home gateway device or from an external media server. Hybrid is an IP video platform device with capabilities such as tuning and conditional access for its video delivery to manage hybrid video functions. TV is an open-source smart TV profile that allows manufacturers and operations to build RDK-based TV and video solutions. RDK Hybrid TV is a combination of TV plus Hybrid capabilities Evolution of RDK From RDK6, RDK-V shifted from quarterly to annual release cycles. This annual RDK release aims to synchronize RDK-V with standard industry release practices while comprehensively addressing shared challenges within the community. This approach facilitates the smoother and more consistent adoption of newly contributed features, utilizing the latest releases from technology partners. By aligning with SoC partners, the release enables better resource planning to support core RDK-V platforms. Furthermore, the RDK-V release aligns with SoC, OEM, and app releases, fostering a more cohesive and efficient ecosystem. The first annual release is RDK6, and its release notes can be accessed from here Architecture Details Below is an illustrative representation of the RDK-V software stack, depicting the various components and their interactions. At its core, RDK-V consists of five main stack levels, each serving a specific purpose in the overall architecture. These levels are as follows: Applications The application layer primarily focuses on the end-user experience. This layer contains applications that provide various services, content, and features to the users. While the RDK-V ecosystem is continuously evolving, supported applications typically include popular OTT services like Netflix, Amazon Prime Video, and YouTube, alongside native broadcaster applications and other services. Application Platform The Application Platform Layer in the RDK-V ecosystem offers essential tools for developers to create applications. It includes components like a UI framework, HTML5 rendering engine, and a JavaScript runtime. This layer acts as a communication channel, serving as a middleware between applications and core RDK-V services. In the RDK-V framework, Firebolt\u00ae handles UI rendering and user input, enabling extensive customization. Lightning\u2122 , an open-source JavaScript platform, manages the application lifecycle and integrates components using WebGL for rendering. Together, Firebolt\u00ae and Lightning\u2122 form a robust foundation for seamless and efficient application development in the RDK-V ecosystem. Firebolt\u00ae 1.0 (Ripple) Firebolt\u00ae 1.0 (Ripple) streamlines RDK-V app integration with standardized rules. Ripple, its open-source Rust-based Application gateway, facilitates dynamic extensions and serves as a Firebolt\u00ae gateway. RDK 6 is Firebolt\u00ae 1.0-certified, with a comprehensive test suite for compliance. Security The Application Platform Layer ensures robust security with Dobby-managed containerization , leveraging Linux kernel features for process isolation. Downloadable Application Containers (DAC) enable the secure running of binary applications on video platforms without modification, ensuring compatibility across RDK 6 devices. Access control is enforced through AppArmor, a proactive Linux security system. RDKM's open-sourced AppArmor profile generator tool for RDK 6 provides fine-grained control over process resources, contributing to a secure environment. Middleware Serving as a vital bridge between the Application Platform Layer and the hardware (HAL), the RDK Middleware Layer incorporates essential components that are pivotal for the seamless operation of the RDK-V platform. Core to this layer are RDK services , providing JSON-RPC services for interactive applications. In the realm of security, iCrypto handles critical cryptographic operations, ensuring secure communication and data protection. Rialto offers a secure solution for AV pipelines in containerized applications, and the Window Manager orchestrates GUI layout. Device management enables streamlined operations in RDK deployments, including bulk operations and firmware downloads. XCONF integration revolutionizes code downloads for a smoother deployment experience. Log uploads aid in comprehensive debugging, offering insights into system performance. RDK Feature Control (RFC) enables dynamic feature management for enhanced flexibility. Telemetry systematically collects essential data insights, while WebPA ensures secure communication between cloud servers and RDK devices. The Media Player, crucial for local rendering devices, manages various pipeline functions, supporting IP and QAM playback. The Open Content Decryption Module(OCDM) enforces Digital Rights Management (DRM) policies. Together with other RDK-V elements, these components ensure the efficient and secure functioning of the RDK-V platform. HAL (Hardware Abstraction Layer) In the RDK-V stack, the HAL layer plays a vital role in facilitating communication between the video application software and hardware components like the GPU, video encoding/decoding hardware, and audio devices. It provides a standardized framework for functions, data structures, and protocols, enabling efficient hardware resource utilization. The HAL layer manages hardware initialization, input/output operations, and hardware-specific events, shielding software developers from hardware complexities and allowing them to prioritize user experience and functionality. RDK-V provides a set of HAL APIs that abstract the platform from RDK. Vendors need to implement the HAL APIs to meet the HAL specifications. With the help of the HAL API specification for different RDK-V components, vendors can successfully port RDK-V to their platform. Depending on the device profile ( IP , Hybrid , TV etc.), vendors may choose the relevant components and perform the port by implementing the HAL layer. For more details on the vendor porting process, refer to the Vendor Porting Guide SOC The System on Chip (SOC) layer forms the foundational interface between hardware components, ensuring system security and reliability. It incorporates various crucial elements, such as DRM Libraries, which manage digital rights and secure content delivery to prevent unauthorized access and distribution. Trusted Applications (Apps TA) guarantee the secure execution of sensitive operations and protect critical data from unauthorized access. The Secure Store oversees the storage of DRM keys and apps triplets, maintaining the confidentiality and integrity of vital data. Additionally, MFR Libraries manage hardware functionality, providing access to specific hardware features and capabilities, thereby contributing to the overall security and functionality of the system. Application Scenario Consider the use case of a user accessing a streaming application like Youtube on an RDK Video-supported device. The user interacts with the application through the Application Layer, selecting content and initiating playback. The Application Platform Layer, utilizing the Firebolt\u00ae and Lightning\u2122 frameworks, manages the user interface and application lifecycle. The RDK-V Layer ensures seamless communication between the application and the hardware, managing services, cryptographic operations, inter-component communication, window management, and content decryption through OpenCDM. The RDK HAL Layer then utilizes the Gstreamer media pipeline to decode and render the video content, ensuring a smooth and high-quality viewing experience. Finally, the SOC Layer provides a secure environment for the entire system, safeguarding the hardware, managing DRM policies, and securing sensitive data, ensuring a secure and reliable video streaming experience for the user. Useful Links RDK-V You can find an overview of the RDK-V platform, detailing its key features and functionalities at RDK Video Documentation Applications To get the information about various applications supported by the RDK-V, aiding in understanding the diverse application landscape refer RDK Video Accelerator - Applications Application Development Developers interested in RDK-V application development using Firebolt\u00ae can refer Firebolt\u00ae Overview Developers interested in RDK-V application development using Lightning\u2122 - the inhouse JavaScript framework - can refer Lightning\u2122 Framework Security Understanding the concept of containerization in RDK-V is crucial for ensuring secure and efficient application deployment, and the Containerization in RDK document provides in-depth insights into this aspect. To learn about the implementation and benefits of Downloadable Application Containers (DAC) within the RDK-V ecosystem, the DAC Documentation offers comprehensive guidance for developers. For insight into the Access Control Mechanism in RDK-V using AppArmor, developers can refer to the AppArmor Documentation to understand how to enforce security policies and restrict application access within the RDK-V environment.","title":"Architecture"},{"location":"rdkv/RDK_V_Architecture/#evolution-of-rdk","text":"From RDK6, RDK-V shifted from quarterly to annual release cycles. This annual RDK release aims to synchronize RDK-V with standard industry release practices while comprehensively addressing shared challenges within the community. This approach facilitates the smoother and more consistent adoption of newly contributed features, utilizing the latest releases from technology partners. By aligning with SoC partners, the release enables better resource planning to support core RDK-V platforms. Furthermore, the RDK-V release aligns with SoC, OEM, and app releases, fostering a more cohesive and efficient ecosystem. The first annual release is RDK6, and its release notes can be accessed from here","title":"Evolution of RDK"},{"location":"rdkv/RDK_V_Architecture/#architecture-details","text":"Below is an illustrative representation of the RDK-V software stack, depicting the various components and their interactions. At its core, RDK-V consists of five main stack levels, each serving a specific purpose in the overall architecture. These levels are as follows:","title":"Architecture Details"},{"location":"rdkv/RDK_V_Architecture/#application-scenario","text":"Consider the use case of a user accessing a streaming application like Youtube on an RDK Video-supported device. The user interacts with the application through the Application Layer, selecting content and initiating playback. The Application Platform Layer, utilizing the Firebolt\u00ae and Lightning\u2122 frameworks, manages the user interface and application lifecycle. The RDK-V Layer ensures seamless communication between the application and the hardware, managing services, cryptographic operations, inter-component communication, window management, and content decryption through OpenCDM. The RDK HAL Layer then utilizes the Gstreamer media pipeline to decode and render the video content, ensuring a smooth and high-quality viewing experience. Finally, the SOC Layer provides a secure environment for the entire system, safeguarding the hardware, managing DRM policies, and securing sensitive data, ensuring a secure and reliable video streaming experience for the user.","title":"Application Scenario"},{"location":"rdkv/RDK_V_Architecture/#useful-links","text":"","title":"Useful Links"},{"location":"rdkv/RDK_V_TryOutRDK/","text":"Try Out RDK-V This guide provides step-by-step instructions for bringing up RDK using a Raspberry Pi as the target device. The document covers the necessary hardware & build setup, build instructions, and detailed flashing instructions to get your Raspberry Pi ready to run the RDK software. The RDK port for Raspberry Pi makes the RDK software stack available on a popular hardware device. Raspberry Pi (RPI) for RDK-V supports Dunfell builds. A variety of images based on requirements can be built for RPI, such as Media Client, Media Gateway Hybrid, and IP Client STB. Build Instructions Build Requirements Setting up the Host Environment Item Specifications Linux PC 64 bit Ubuntu 18.04 LTS (Precisely supported distributions and versions are here ) Free HDD Space Minimum 100GB Free Memory Space Raspberry Pi development kit Raspberry Pi 4 Model B Host tool versions Tool Version Git 1.8.3.1 or greater Python 3.8.10 tar 1.24 or greater Install the following packages for setting up your host VM before building an image The instructions provided below are meant to be executed via the command line on an Ubuntu machine. # essential package installation # super user mode is required # major essential packages sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib g++-multilib build-essential chrpath socat bison curl cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm Configure bash as default command interpreter for shell scripts sudo dpkg-reconfigure dash Select No Configure Git Upgrade Git version to 1.8.x or higher. Once git is installed, configure your name and email using the below commands. # review your existing configuration git config --list --show-origin # configure user name and email address git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com # configure git cookies. Needed for Gerrit to only contact the LDAP backend once. git config --global http.cookieFile /tmp/gitcookie.txt git config --global http.saveCookies true Configure Repo tool In order to use Yocto build system, first you need to make sure that repo is properly installed on the machine # create a bin directory mkdir ~/bin export PATH=~/bin:$PATH # Download the repo tool and ensure that it is executable curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo chmod a+x ~/bin/repo Note: it is also recommended to put credentials in .netrc when interacting with the repo. A sample .netrc file is illustrated below. machine code.rdkcentral.com\\ login \\ password Build Steps # initialize the manifest with repo tool repo init -u https://code.rdkcentral.com/r/manifests -b 6.0.0 -m rdkv.xml repo sync --no-clone-bundle --no-tags MACHINE=raspberrypi4-64-rdk-android-mc source meta-cmf-raspberrypi/setup-environment bitbake lib32-rdk-generic-mediaclient-wpe-image # To build tdk image bitbake lib32-rdk-generic-mediaclient-wpe-tdk-image The generated image resides under the directory build- /tmp/deploy/images/ of the Yocto workspace Flashing and bringup This section outlines two methods for flashing: Flashing the SD Card in a Linux environment and in a Windows environment ( using balenaEtcher App ). Flashing in Linux Insert an SD card in the SD card port of the USB SD card reader (or Laptop). ( It is recommended to use a 32GB SD card and there should be minimum 12GB free space available in the device. ) Verify that the SD card has been detected by executing either of the commands listed below. $lsblk $sudo fdisk \u2013l $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 931.5G 0 disk \u251c\u2500sda1 8:1 0 350M 0 part \u251c\u2500sda2 8:2 0 3G 0 part \u251c\u2500sda3 8:3 0 896.4G 0 part / \u251c\u2500sda4 8:4 0 1K 0 part \u2514\u2500sda5 8:5 0 31.8G 0 part [SWAP] sdb 8:16 1 14.9G 0 disk \u251c\u2500sdb1 8:17 1 40M 0 part /media/raspberrypi \u2514\u2500sdb2 8:18 1 552M 0 part /media/dd5efb34-1d40-4e50-bbc2-a75d3e02af97 sr0 11:0 1 1024M 0 rom Type the following command to ensure that the partitions, if present, on the SD card are not mounted. $ mount /dev/sda3 on / type ext4 (rw,errors=remount-ro) proc on /proc type proc (rw,noexec,nosuid,nodev) sysfs on /sys type sysfs (rw,noexec,nosuid,nodev) none on /sys/fs/fuse/connections type fusectl (rw) none on /sys/kernel/debug type debugfs (rw) none on /sys/kernel/security type securityfs (rw) udev on /dev type devtmpfs (rw,mode=0755) devpts on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620) tmpfs on /run type tmpfs (rw,noexec,nosuid,size=10%,mode=0755) none on /run/lock type tmpfs (rw,noexec,nosuid,nodev,size=5242880) none on /run/shm type tmpfs (rw,nosuid,nodev) binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,noexec,nosuid,nodev) rpc_pipefs on /run/rpc_pipefs type rpc_pipefs (rw) nfsd on /proc/fs/nfsd type nfsd (rw) none on /tmp/guest-zdrO76 type tmpfs (rw,mode=700) gvfs-fuse-daemon on /var/lib/lightdm/.gvfs type fuse.gvfs-fuse-daemon (rw,nosuid,nodev,user=lightdm) /dev/sdb1 on /media/raspberrypi type vfat (rw,nosuid,nodev,uid=136,gid=148,shortname=mixed,dmask=0077,utf8=1,showexec,flush,uhelper=udisks) /dev/sdb2 on /media/dd5efb34-1d40-4e50-bbc2-a75d3e02af97 type ext3 (rw,nosuid,nodev,uhelper=udisks) Repeat the below command to unmount all the mounted partition present on the SD card. $umount <partition-mountpoint> $ sudo umount /dev/sdb1 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 931.5G 0 disk \u251c\u2500sda1 8:1 0 350M 0 part \u251c\u2500sda2 8:2 0 3G 0 part \u251c\u2500sda3 8:3 0 896.4G 0 part / \u251c\u2500sda4 8:4 0 1K 0 part \u2514\u2500sda5 8:5 0 31.8G 0 part [SWAP] sdb 8:16 1 14.9G 0 disk \u251c\u2500sdb1 8:17 1 40M 0 part \u2514\u2500sdb2 8:18 1 552M 0 part /media/dd5efb34-1d40-4e50-bbc2-a75d3e02af97 sr0 11:0 1 1024M 0 rom $ sudo umount /dev/sdb2 $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 931.5G 0 disk \u251c\u2500sda1 8:1 0 350M 0 part \u251c\u2500sda2 8:2 0 3G 0 part \u251c\u2500sda3 8:3 0 896.4G 0 part / \u251c\u2500sda4 8:4 0 1K 0 part \u2514\u2500sda5 8:5 0 31.8G 0 part [SWAP] sdb 8:16 1 14.9G 0 disk \u251c\u2500sdb1 8:17 1 40M 0 part \u2514\u2500sdb2 8:18 1 552M 0 part sr0 11:0 1 1024M 0 rom Execute the following command to flash the image on the SD card. $sudo dd if=<path to ImageName.Rpi-sdimg> of=<path to SD card space> bs=4M Example: $sudo dd if=rdk-generic-mediaclient-wpe-image.Rpi-sdimg of=/dev/sdb bs=4M 149+0 records in 149+0 records out 624951296 bytes (625 MB) copied, 39.7752 s, 15.7 MB/s Remove the SD card and insert it to the Raspberry Pi SD card slot. Flashing in Windows To flash the image on an SD card, you will need to download the balenaEtcher application from here Note: Prefer to use a 32GB SD card and there should be a minimum of 12GB of free space available in the device. Be sure to remove all other portable flash drives/hard drives/SD cards from your computer before flashing the RDK image. Open the application. Select the image from your download folder Select the drive containing your SD card Click \u201cFlash\u201d to copy the image onto the SD card Once image flashing is done, remove the SD card from the device/laptop and insert the SD card into the microSD card slot on the underside of your Raspberry Pi. Test Setup requirements Connect TV/Monitor to HDMI video output. Connect Ethernet cable to ETH port. The other end of the Ethernet cable should be connected to the network where the DHCP server is running so that the Raspberry Pi device gets assigned an IP address on boot-up. Insert the SD card into microSD card slot. Connect the power cable to Micro USB power input. Power on the Raspberry Pi. TV screen will display the default RDK UI as shown below. To view the Raspberry Pi's IP address(referred as machineIP from now), Go to 'Settings \u2192 Network Configuration \u2192 Network Info \u2192 see for 'IP Address''. Accessing controller UI For connecting to Controller UI, use URL: http:// :9998 Plugins can be enabled or disabled from controller UI. For example, Wifi plugin related services can be triggered from Wi-Fi tab in controller UI. Scan and select from available networks. For ssh, use ssh root@machineip. For verifying the image details, use cat /version.txt command.","title":"Contributing"},{"location":"rdkv/RDK_V_TryOutRDK/#build-instructions","text":"","title":"Build Instructions"},{"location":"rdkv/RDK_V_TryOutRDK/#flashing-and-bringup","text":"This section outlines two methods for flashing: Flashing the SD Card in a Linux environment and in a Windows environment ( using balenaEtcher App ).","title":"Flashing and bringup"},{"location":"rdkv/RDK_V_TryOutRDK/#test-setup-requirements","text":"Connect TV/Monitor to HDMI video output. Connect Ethernet cable to ETH port. The other end of the Ethernet cable should be connected to the network where the DHCP server is running so that the Raspberry Pi device gets assigned an IP address on boot-up. Insert the SD card into microSD card slot. Connect the power cable to Micro USB power input. Power on the Raspberry Pi. TV screen will display the default RDK UI as shown below. To view the Raspberry Pi's IP address(referred as machineIP from now), Go to 'Settings \u2192 Network Configuration \u2192 Network Info \u2192 see for 'IP Address''.","title":"Test Setup requirements"}]}